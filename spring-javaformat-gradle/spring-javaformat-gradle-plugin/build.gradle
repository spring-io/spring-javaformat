plugins {
	id 'java'
	id 'eclipse'
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile localGroovy()
	compile gradleApi()
	compile fileTree(dir: 'target/dependencies/compile', include: '*.jar')
	testCompile gradleTestKit()
	testCompile fileTree(dir: 'target/dependencies/test', include: '*.jar')
}

jar {
	manifest {
		attributes 'Implementation-Version': (version ? version : 'unknown')
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed"
	}
}

eclipseJdt {
	inputFile = rootProject.file('../../.eclipse/org.eclipse.jdt.core.prefs')
	doLast {
		project.file('.settings/org.eclipse.jdt.ui.prefs').withWriter { writer ->
			writer << file('../../.eclipse/org.eclipse.jdt.ui.prefs').text
		}
	}
}

eclipse.classpath.file.whenMerged { classpath ->
	classpath.entries.each { entry ->
		if (entry.kind == "src" && entry.path.endsWith("/resources")) {
			entry.excludes = [ "**" ]
		}
	}
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}


